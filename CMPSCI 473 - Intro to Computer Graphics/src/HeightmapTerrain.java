/*
 * PERMODELAN TERRAIN DENGAN MENGGUNAKAN
 * TEKNIK HEIGHTMAP
 *
 * Decky Kurniawan		5106100131
 * I Made Krisna Widhiastra	5107100038
 * Reza Adhitya Saputra		5107100098
 * Izzudin Gumilar Aprilian	5107100125
 *
 */

import com.sun.opengl.util.Animator;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.reflect.InvocationTargetException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;

/**
 * GUI aplikasi
 */
public class HeightmapTerrain extends JFrame {

    private Animator animator;          // kelas animator
    private GLRenderer renderer;        // kelas renderer
    private static byte[] input_bytes = null;

    public ThreadHeightmap repainter;   // thread

    /** Creates new form MainFrame */
    public HeightmapTerrain()
    {
        initComponents();
        
        renderer = new GLRenderer();
        heightmapCanvas.addGLEventListener(renderer);
        animator = new Animator(heightmapCanvas);

        heightmapCanvas.requestFocus();        

        this.addWindowListener(new WindowAdapter()
        {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });

        // setting thread
        this.repainter = new ThreadHeightmap(heightmapCanvas);
        this.repainter.setPriority(Thread.MIN_PRIORITY);
        this.repainter.start();

        // agar pas ... :D
        renderer.camera.moveForward(-50.0f);
        renderer.camera.moveUpward(-4.0f);
    }

    @Override
    public void setVisible(boolean show){
        if(!show)
            animator.stop();
        super.setVisible(show);
        if(!show)
            animator.start();
    }


    private void resetTerrain(String filename)
    {

        renderer = new GLRenderer(filename);
        heightmapCanvas.addGLEventListener(renderer);
    }

//    private ImageIcon createImageIcon(String path)
//    {
//        java.net.URL imgURL = Frame.class.getResource(path);
//        if (imgURL != null)
//            return new ImageIcon(imgURL);
//        else
//        {
//            System.err.println("Couldn't find file: " + path);
//            return null;
//        }
//    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        heightmapCanvas = new GLCanvas();
//        resetCameraButton = new JButton();
//        drawingOptionPanel = new JPanel();
//        terrainSelectionPanel = new JPanel();
//        t1RB = new JRadioButton();
//        t2RB = new JRadioButton();
//        t3RB = new JRadioButton();
//        t4RB = new JRadioButton();
//        TexturingModePanel = new JPanel();
//        tex1RB = new JRadioButton();
//        tex3RB = new JRadioButton();
//        tex2RB = new JRadioButton();
//        controlGuideButton = new JButton();
//        aboutButton = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Heightmap Landscape");
        addMouseMotionListener(new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        heightmapCanvas.addMouseWheelListener(new MouseWheelListener() {
            public void mouseWheelMoved(MouseWheelEvent evt) {
                heightmapCanvasMouseWheelMoved(evt);
            }
        });
        heightmapCanvas.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                heightmapCanvasMouseClicked(evt);
            }
        });
        heightmapCanvas.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                heightmapCanvasKeyPressed(evt);
            }
        });

//        resetCameraButton.setText("Reset Camera");
//        resetCameraButton.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                resetCameraButtonActionPerformed(evt);
//            }
//        });

//        drawingOptionPanel.setBorder(BorderFactory.createTitledBorder("Drawing Option"));

//        cullingCB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                cullingCBActionPerformed(evt);
//            }
//        });

//        GroupLayout drawingOptionPanelLayout = new GroupLayout(drawingOptionPanel);
//        drawingOptionPanel.setLayout(drawingOptionPanelLayout);
//        drawingOptionPanelLayout.setHorizontalGroup(
//            drawingOptionPanelLayout.createParallelGroup(Alignment.LEADING)
//            .addGroup(drawingOptionPanelLayout.createSequentialGroup()
//                .addContainerGap(43, Short.MAX_VALUE))
//        );
//        drawingOptionPanelLayout.setVerticalGroup(
//            drawingOptionPanelLayout.createParallelGroup(Alignment.LEADING)
//        );

//        terrainSelectionPanel.setBorder(BorderFactory.createTitledBorder("Terrain Selection"));
//
//        t1RB.setText("Acker Rock");
//        t1RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                t1RBActionPerformed(evt);
//            }
//        });
//
//        t2RB.setText("Terrain I");
//        t2RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                t2RBActionPerformed(evt);
//            }
//        });
//
//        t3RB.setText("Terrain II");
//        t3RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                t3RBActionPerformed(evt);
//            }
//        });
//
//        t4RB.setText("Heightfield");
//        t4RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                t4RBActionPerformed(evt);
//            }
//        });

//        GroupLayout terrainSelectionPanelLayout = new GroupLayout(terrainSelectionPanel);
//        terrainSelectionPanel.setLayout(terrainSelectionPanelLayout);
//        terrainSelectionPanelLayout.setHorizontalGroup(
//            terrainSelectionPanelLayout.createParallelGroup(Alignment.LEADING)
//            .addGroup(terrainSelectionPanelLayout.createSequentialGroup()
//                .addContainerGap()
//                .addGroup(terrainSelectionPanelLayout.createParallelGroup(Alignment.LEADING)
//                    .addComponent(t1RB)
//                    .addComponent(t2RB)
//                    .addComponent(t3RB)
//                    .addComponent(t4RB))
//                .addContainerGap(43, Short.MAX_VALUE))
//        );
//        terrainSelectionPanelLayout.setVerticalGroup(
//            terrainSelectionPanelLayout.createParallelGroup(Alignment.LEADING)
//            .addGroup(terrainSelectionPanelLayout.createSequentialGroup()
//                .addComponent(t1RB)
//                .addPreferredGap(ComponentPlacement.RELATED)
//                .addComponent(t2RB)
//                .addPreferredGap(ComponentPlacement.RELATED)
//                .addComponent(t3RB)
//                .addPreferredGap(ComponentPlacement.RELATED)
//                .addComponent(t4RB)
//                .addContainerGap(2, Short.MAX_VALUE))
//        );
//
//        TexturingModePanel.setBorder(BorderFactory.createTitledBorder("Texturing Mode"));
//
//        tex1RB.setText("Nearest Filtered");
//        tex1RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                tex1RBActionPerformed(evt);
//            }
//        });
//
//        tex3RB.setText("Mipmapped");
//        tex3RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                tex3RBActionPerformed(evt);
//            }
//        });
//
//        tex2RB.setText("Linear Filtered");
//        tex2RB.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                tex2RBActionPerformed(evt);
//            }
//        });
//
//        GroupLayout TexturingModePanelLayout = new GroupLayout(TexturingModePanel);
//        TexturingModePanel.setLayout(TexturingModePanelLayout);
//        TexturingModePanelLayout.setHorizontalGroup(
//            TexturingModePanelLayout.createParallelGroup(Alignment.LEADING)
//            .addGroup(TexturingModePanelLayout.createSequentialGroup()
//                .addGroup(TexturingModePanelLayout.createParallelGroup(Alignment.LEADING)
//                    .addComponent(tex1RB)
//                    .addComponent(tex2RB)
//                    .addComponent(tex3RB))
//                .addContainerGap(25, Short.MAX_VALUE))
//        );
//        TexturingModePanelLayout.setVerticalGroup(
//            TexturingModePanelLayout.createParallelGroup(Alignment.LEADING)
//            .addGroup(TexturingModePanelLayout.createSequentialGroup()
//                .addComponent(tex1RB)
//                .addPreferredGap(ComponentPlacement.RELATED)
//                .addComponent(tex2RB)
//                .addPreferredGap(ComponentPlacement.RELATED)
//                .addComponent(tex3RB))
//        );
//
//        controlGuideButton.setText("Control Guide");
//        controlGuideButton.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                controlGuideButtonActionPerformed(evt);
//            }
//        });
//
//        aboutButton.setText("About");
//        aboutButton.addActionListener(new ActionListener() {
//            public void actionPerformed(ActionEvent evt) {
//                aboutButtonActionPerformed(evt);
//            }
//        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(heightmapCanvas, GroupLayout.DEFAULT_SIZE, 837, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
//                .addGroup(layout.createParallelGroup(Alignment.LEADING)
//                    .addComponent(drawingOptionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
//                    .addComponent(terrainSelectionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
//                    .addComponent(TexturingModePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
//                    .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
//                        .addComponent(resetCameraButton, GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
//                        .addComponent(controlGuideButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//                        .addComponent(aboutButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
               /* .addContainerGap()*/)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
//                .addContainerGap()
//                .addGroup(layout.createParallelGroup(Alignment.LEADING)
//                    .addGroup(layout.createSequentialGroup()
//                        .addComponent(drawingOptionPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
//                        .addGap(18, 18, 18)
//                        .addComponent(terrainSelectionPanel, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
//                        .addGap(18, 18, 18)
//                        .addComponent(TexturingModePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
//                        .addPreferredGap(ComponentPlacement.RELATED, 296, Short.MAX_VALUE)
//                        .addComponent(resetCameraButton)
//                        .addPreferredGap(ComponentPlacement.RELATED)
//                        .addComponent(controlGuideButton)
//                        .addPreferredGap(ComponentPlacement.RELATED)
//                        .addComponent(aboutButton))
                    .addComponent(heightmapCanvas, GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE))
//                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    private void formKeyPressed(KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void heightmapCanvasKeyPressed(KeyEvent evt) {//GEN-FIRST:event_heightmapCanvasKeyPressed
        int button = evt.getKeyCode();
        float scale = renderer.getScaleValue();

        if(button == KeyEvent.VK_UP)                // rotasi ke atas
            renderer.camera.rotateX(2.0f);
        else if(button == KeyEvent.VK_DOWN)         // rotasi ke bawah
            renderer.camera.rotateX(-2.0f);
        else if(button == KeyEvent.VK_RIGHT)        // rotasi ke kiri
            renderer.camera.rotateY(-2.0f);
        else if(button == KeyEvent.VK_LEFT)         // rotasi ke kanan
            renderer.camera.rotateY(2.0f);
        else if(button == KeyEvent.VK_W)            // translasi ke depan
            renderer.camera.moveForward(-1.0f);
        else if(button == KeyEvent.VK_A)            // translasi ke kiri
            renderer.camera.strafeRight(-1.0f);
        else if(button == KeyEvent.VK_S)            // translasi ke belakang
            renderer.camera.moveForward(1.0f);
        else if(button == KeyEvent.VK_D)            // translasi ke kanan
            renderer.camera.strafeRight(1.0f);
        else if(button == KeyEvent.VK_Q)            // translasi ke atas
            renderer.camera.moveUpward(1.0f);
        else if(button == KeyEvent.VK_E)            // translasi ke bawah
            renderer.camera.moveUpward(-1.0f);
         else if(button == KeyEvent.VK_Z)           // rotasi sumbu Z (kiri)
            renderer.camera.rotateZ(-2.0f);
        else if(button == KeyEvent.VK_X)            // rotasi sumbu Z (kanan)
            renderer.camera.rotateZ(2.0f);
        else if(button == KeyEvent.VK_PAGE_UP)      // zoom in
            renderer.setScaleValue(scale + 0.01f);
        else if(button == KeyEvent.VK_PAGE_DOWN)    // zoom out
            renderer.setScaleValue(scale - 0.01f);
        else if(button == KeyEvent.VK_1)                // LINE rendering
            renderer.setRenderType(RenderType.LINE);
        else if(button == KeyEvent.VK_2)
            renderer.setRenderType(RenderType.TEXTURED);// TEXTURED rendering
        else if(button == KeyEvent.VK_ESCAPE)
            System.exit(0);

    }//GEN-LAST:event_heightmapCanvasKeyPressed

    private void heightmapCanvasMouseWheelMoved(MouseWheelEvent evt) {//GEN-FIRST:event_heightmapCanvasMouseWheelMoved

    }//GEN-LAST:event_heightmapCanvasMouseWheelMoved

    private void heightmapCanvasMouseClicked(MouseEvent evt) {//GEN-FIRST:event_heightmapCanvasMouseClicked
        // jika mouse di klik kiri maka akan melakukan pengaturan
        // rendering pada model terrain
        RenderType renderType = renderer.getRenderType();

        if(renderType == RenderType.LINE)
            renderer.setRenderType(RenderType.SOLID);
        else if(renderType == RenderType.SOLID)
            renderer.setRenderType(RenderType.MULTICOLOR);
        else if(renderType == RenderType.MULTICOLOR)
            renderer.setRenderType(RenderType.LINE);
    }//GEN-LAST:event_heightmapCanvasMouseClicked

    private void resetCameraButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resetCameraButtonActionPerformed
        renderer.camera.reset();
        renderer.camera.moveForward(-50.0f);
        renderer.camera.moveUpward(-4.0f);
    }//GEN-LAST:event_resetCameraButtonActionPerformed

    private void controlGuideButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_controlGuideButtonActionPerformed
        // manu about
        JOptionPane.showMessageDialog(null,
                "Control Guide\n" +
                "\n" +
                "W - Forward\n" +
                "A - Move Left\n" +
                "S - Backward\n" +
                "D - Move Right\n" +
                "Q - Upward\n" +
                "E - Downward\n\n" +
                "UP - Rotating Up\n" +
                "DOWN - Rotating Down\n" +
                "RIGHT - Rotating Right\n" +
                "LEFT - Rotating Left\n" +
                "Z - Rotate Left by Z Axis\n" +
                "X - Rotate Right by Z Axis\n\n" +
                "PG UP - Increase Scaling\n" +
                "PG DOWN - Decrease Scaling\n\n",
                "User Guide", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_controlGuideButtonActionPerformed

    private void aboutButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        // Menu About
        JOptionPane.showMessageDialog(null,
                "Heightmap Landscape\n" +
                "\n" +
                "Decky Kurniawan - 5106100131\n" +
                "I Made Krisna Widhiastra - 5107100038\n" +
                "Reza Adhitya Saputra - 5107100098\n" +
                "Izzudin Gumilar Aprilian - 5107100125\n\n");
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void cullingCBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cullingCBActionPerformed
        // setting culling

    }//GEN-LAST:event_cullingCBActionPerformed
    

//    private void t1RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_t1RBActionPerformed
//        // ACKER ROCK
//        if(t1RB.isSelected())
//        {
//            t2RB.setSelected(false);
//            t3RB.setSelected(false);
//            t4RB.setSelected(false);
//
//            renderer.loadFile("Acker_Rock.raw");
//            renderer.terrainFilter = 0;
//        }
//    }//GEN-LAST:event_t1RBActionPerformed
//
//    private void t2RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_t2RBActionPerformed
//        // TERRAIN I
//        if(t2RB.isSelected())
//        {
//            t1RB.setSelected(false);
//            t3RB.setSelected(false);
//            t4RB.setSelected(false);
//
//            renderer.loadFile("Terrain1.raw");
//            renderer.terrainFilter = 1;
//        }
//    }//GEN-LAST:event_t2RBActionPerformed
//
//    private void t3RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_t3RBActionPerformed
//        // TERRAIN II
//        if(t3RB.isSelected())
//        {
//            t1RB.setSelected(false);
//            t2RB.setSelected(false);
//            t4RB.setSelected(false);
//
//            renderer.loadFile("Terrain2.raw");
//            renderer.terrainFilter = 2;
//        }
//    }//GEN-LAST:event_t3RBActionPerformed
//
//    private void t4RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_t4RBActionPerformed
//        // HEIGHFIELD
//        if(t4RB.isSelected())
//        {
//            t1RB.setSelected(false);
//            t2RB.setSelected(false);
//            t3RB.setSelected(false);
//
//            renderer.loadFile("Heightfield.raw");
//            renderer.terrainFilter = 3;
//        }
//    }//GEN-LAST:event_t4RBActionPerformed
//
//    private void tex1RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tex1RBActionPerformed
//        // NEAREST FILTERED
//        if(tex1RB.isSelected())
//        {
//            tex2RB.setSelected(false);
//            tex3RB.setSelected(false);
//
//            renderer.textureFilter = 0;
//        }
//    }//GEN-LAST:event_tex1RBActionPerformed
//
//    private void tex2RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tex2RBActionPerformed
//        // LINEAR FILTERED
//        if(tex2RB.isSelected())
//        {
//            tex1RB.setSelected(false);
//            tex3RB.setSelected(false);
//
//            renderer.textureFilter = 1;
//        }
//    }//GEN-LAST:event_tex2RBActionPerformed
//
//    private void tex3RBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_tex3RBActionPerformed
//        // MIPMAPPING
//        if(tex3RB.isSelected())
//        {
//            tex2RB.setSelected(false);
//            tex1RB.setSelected(false);
//
//            renderer.textureFilter = 2;
//        }
//    }//GEN-LAST:event_tex3RBActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
    	try {
			SwingUtilities.invokeAndWait(new Runnable() {

			    @Override
			    public void run() {
			        JFileChooser fc = new JFileChooser();
			        int returnVal = fc.showOpenDialog(null);

			        if (returnVal == JFileChooser.APPROVE_OPTION) {
			            File file = fc.getSelectedFile();

			            //This is where a real application would open the file.
			            System.out.println("Opening: " + file.getName() + ".\n");
			            System.out.println("Size in Bytes: " + file.getFreeSpace() + ".\n");
			            try{
			                RandomAccessFile rand_file = new RandomAccessFile(file.getAbsoluteFile(), "rw");
			                System.out.println("Size in Bytes: " + rand_file.length() + ".\n");
			                rand_file.seek(0);
			                input_bytes = new byte[(int)rand_file.length()];
			                rand_file.readFully(input_bytes);
			                System.out.println("Output: " + input_bytes.toString() + ".\n");

			                
			                rand_file.close(); 
			               } catch (IOException e) {//If the file is not found
			       			e.printStackTrace();  //Print trace the error
			       		}

			        } else {
			            System.out.println("Open command cancelled by user.\n");
			        }
			    
			    }
			});
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	// Run this in the AWT event thread to prevent deadlocks and race conditions
    	EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }
                
                HeightmapTerrain frame = new HeightmapTerrain();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
//    private JPanel TexturingModePanel;
//    private JButton aboutButton;
//    private JButton controlGuideButton;
//    private JPanel drawingOptionPanel;
    private GLCanvas heightmapCanvas;
//    private JButton resetCameraButton;
//    private JRadioButton t1RB;
//    private JRadioButton t2RB;
//    private JRadioButton t3RB;
//    private JRadioButton t4RB;
//    private JPanel terrainSelectionPanel;
//    private JRadioButton tex1RB;
//    private JRadioButton tex2RB;
//    private JRadioButton tex3RB;
    // End of variables declaration//GEN-END:variables

}
